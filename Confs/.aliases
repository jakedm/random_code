########################################################
# List of necessary packages just for bash functions:
#   mdfinder.app
#   elinks
#   inxi
#   curl
#
# List of aliased packages (or ones that are important)
#   python-pip
#   emacs
#   htop
#
########################################################

#------------------------------------------////
#  ALIASES
#------------------------------------------////

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    eval `dircolors -b`
    alias ls='ls -hF --color=auto'
    alias la='ls -hAlt --color=auto'
    #alias ls='du -s */* | sort -n'
    alias dir='ls --color=auto --format=vertical'
    alias vdir='ls --color=auto --format=long'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
alias work='/home/hutch_research/workspaces/moorhej'
alias net='${BROWSER} 2>/dev/null &'
alias hardware='inxi -Fx'
alias weather='curl http://wttr.in/Seattle'
alias e='emacs -nw $1'

#------------------------------------------////
# FUNCTIONS:
#------------------------------------------////

# Make file with names and prototypes of all methods/functions in file
# Works with:
#   Python (2 and 3) [Functions/methods only, no object support]
#   Perl [*.pl and *.pm support]
mkhead ()
{
    if [[ $1 =~ \.py$ ]]; then
        touch "header_${1%.py}.txt";
        echo "//--- Header file created by mkhead() ---//" > "${1%.py}_header.txt";
        cat $1 | grep "def" >> "${1%.py}_header.txt"
	elif [[ $1 =~ \.pl$ ]]; then
        touch "header_${1%.pl}.txt";
        echo "//--- Header file created by mkhead() ---//" > "${1%.py}_header.txt";
        cat $1 | grep "sub" >> "${1%.pl}_header.txt"
	elif [[ $1 =~ \.pm$ ]]; then
		touch "header_${1%.pm}.txt";
        echo "//--- Header file created by mkhead() ---//" > "${1%.py}_header.txt";
        cat $1 | grep "sub" >> "${1%.pm}_header.txt"
    fi
}

upinfo ()
{
    echo -ne "Upinfo: \t "; uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10}'
}

function my-ip() # get IP adresses
{
    MY_IP=$(ip -o address | awk '!/inet6/' | awk '!/127.0.0.1/ { print $4; } ' | awk -F '/' '{print $1;}')
    WAN_IP=$(elinks -dump http://checkip.dyndns.org:8245/)
    #MY_IP=$(/sbin/ifconfig eth0 | awk "/inet/ { print $2 } " | sed -e s/addr://)
    #MY_ISP=$(/sbin/ifconfig eth0 | awk "/P-t-P/ { print $3 } " | sed -e s/P-t-P://)
}

function ii() # get current host related info
{
    MY_IP=$(ip -o address | awk '!/inet6/' | awk '!/127.0.0.1/ { print $4; } ' | awk -F '/' '{print $1;}')
    WAN_IP=$(elinks -dump http://checkip.dyndns.org:8245/ | awk '{print $NF}')

    echo -e "\n${BLUE}You are logged on $HOST"
    echo -e "\nAdditional information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Memory stats :$NC " ; free
    echo -e "\n${RED}LAN IP :$NC" ; echo "${MY_IP}"
    echo -e "\n${RED}WAN IP :$NC" ; echo "${WAN_IP}"
    echo
}

# Get weather (replace the 71822 in the url with your own zipcode, call it by typing weather)
function weather ()
{
    declare -a WEATHERARRAY
    WEATHERARRAY=( `elinks -dump "http://www.google.com/search?hl=en&lr=&client=firefox-a&rls=org.mozilla%3Aen-US%3Aofficial&q=weather+98229&btnG=Search" | grep -A 5 -m 1 "Weather for" | grep -v "Add to "`)
    echo ${WEATHERARRAY[@]}
}


function true-ip() {
    WAN_IP=`elinks -dump http://checkip.dyndns.org:8245/`
    echo "${WAN_IP}"
}

#Display a PDF of a given man page
function pdfman() {
    man -t $@ | pstopdf -i -o /tmp/$1.pdf && open /tmp/$1.pdf
}

#Extract a zip file, given by argument
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)  tar xjf $1    ;;
      *.tar.gz) tar xzf $1    ;;
      *.bz2)    bunzip2 $1    ;;
      *.rar)    rar x $1    ;;
      *.gz)   gunzip $1   ;;
      *.tar)    tar xf $1   ;;
      *.tbz2)   tar xjf $1    ;;
      *.tgz)    tar xzf $1    ;;
      *.zip)    unzip $1    ;;
      *.Z)    uncompress $1 ;;
      *)      echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

#------------------------------------------////
# Encryption/Decryption:

# requires gpg
# the proper way to use these functions is simply to enter "encrypt filename" or "decrypt filename"
encrypt ()
{
gpg -ac --no-options "$1"
}

decrypt (){
   gpg --no-options "$1"
}

#------------------------------------------////
# Up Function:

# given a number, it will go up as many dirs as possible
up(){
	local d=""
	limit=$1
	for ((i=1 ; i <= limit ; i++))
	do
                d=$d/..
	done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
	   d=..
	fi
	cd $d
}

#------------------------------------------////
# Copy and Go to Dir Function:

# Copy a file and go to directory
cpg (){
  if [ -d "$2" ];then
     cp $1 $2 && cd $2
  else
     cp $1 $2
  fi
}

#------------------------------------------////
# Find and Grep function:

# Look for a string in files;
#   Works recursively from current directory
findgrep () {
    if [ $# -eq 0 ]; then
        echo "findgrep: No arguments entered."; return 1
    else
        # "{.[a-zA-Z],}*" instead of "." makes the output cleaner
        find {.[a-zA-Z],}* -type f | xargs grep -n $* /dev/null 2> /dev/null

    fi
}

#------------------------------------------////
# Scour Function:


# Look for specific file on system, starting at /.
function scour() {
    find / -iname '*'$1'*';
}


#------------------------------------------////
# List Apps Function:

# list_all_apps: list all applications on the system
list_all_apps() {
    mdfind 'kMDItemContentTypeTree == "com.apple.application"c' ;
}
